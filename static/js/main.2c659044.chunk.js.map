{"version":3,"sources":["components/page.js","components/move.js","store/index.js","sections/socialmedia.js","sections/About.js","components/skill_cards.js","sections/skills.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Page","children","this","props","className","id","Component","Move","activeClass","to","target","spy","smooth","hashSpy","offset","duration","delay","isDynamic","ignoreCancelEvents","src","icon","store","color","observable","Socialmedia","observer","style","background","snowflakeCount","data","title","textAlign","subtitle","Object","keys","links","map","key","url","icons","down","About","sections","items","i","content","SkillCards","skill","img","alt","Skills","up","Navbar","onClick","Change","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6lDAGqBA,G,uLACT,IACAC,EAAaC,KAAKC,MAAlBF,SACR,OACE,yBAAKG,UAAS,eAAUF,KAAKC,MAAMC,WAAa,IAAMC,GAAIH,KAAKC,MAAME,IAAKJ,O,GAJ9CK,c,uBCCbC,G,uLACT,IACAN,EAAaC,KAAKC,MAAlBF,SAER,OACE,kBAAC,OAAD,CACEO,YAAY,SACZC,GAAIP,KAAKC,MAAMO,OACfC,KAAK,EACLC,QAAQ,EACRC,SAAS,EACTC,OAAQ,EACRC,SAAU,IACVC,MAAO,EACPC,WAAW,EACXC,oBAAoB,GAEnBjB,EACD,yBAAKG,UAAU,OACb,yBAAKe,IAAKjB,KAAKC,MAAMiB,KAAMhB,UAAU,c,GAnBbE,c,gDCiBnBe,EAFD,I,aAZZ,aAAe,qDACbnB,KAAKoB,MAAQ,E,qDAGTpB,KAAKoB,MAAQ,EACfpB,KAAKoB,OAAS,EAEdpB,KAAKoB,MAAQ,M,wCARhBC,K,gFCgCYC,EA5BdC,Y,mLAGG,OACE,kBAAC,EAAD,CAAMrB,UAAS,WAAMiB,EAAMC,OAASjB,GAAG,eACrC,kBAAC,IAAD,CACEiB,MAAM,QACNI,MAAO,CAAEC,WAAY,IACrBC,eAAgB,MAElB,wBAAIxB,UAAU,SAASyB,EAAKC,OAE5B,wBAAIJ,MAAO,CAAEK,UAAW,WAAaF,EAAKG,UAE1C,yBAAK5B,UAAU,SACZ6B,OAAOC,KAAKL,EAAKM,OAAOC,KAAI,SAAAC,GAAG,OAC9B,yBAAKjC,UAAU,QACb,kBAAC,aAAD,CAAYkC,IAAKT,EAAKM,MAAME,UAKlC,kBAAC,EAAD,CAAMjB,KAAMS,EAAKU,MAAMC,KAAKF,IAAK5B,OAAO,e,GArBtBJ,e,ECsBXmC,G,MAxBdhB,Y,mLAGG,OACE,kBAAC,EAAD,CAAMrB,UAAS,WAAMiB,EAAMC,OAASjB,GAAG,SACrC,kBAAC,IAAD,CACEiB,MAAM,QACNI,MAAO,CAAEC,WAAY,IACrBC,eAAgB,MAElB,wBAAIxB,UAAU,KAAKC,GAAG,SACnB,IACAwB,EAAKa,SAAS,GAAGZ,OAEnBD,EAAKa,SAAS,GAAGC,MAAMP,KAAI,SAAAQ,GAAC,OAC3B,2BAAIA,EAAEC,YAGR,kBAAC,EAAD,CAAMzB,KAAMS,EAAKU,MAAMC,KAAKF,IAAK5B,OAAO,gB,GAjB5BJ,e,GCPCwC,G,uLACT,IACAC,EAAU7C,KAAKC,MAAf4C,MACR,OACE,yBAAK3C,UAAU,QACb,yBAAKA,UAAU,iBACb,yBACEe,IAAK4B,EAAMF,QAAQG,IACnBC,IAAKF,EAAMF,QAAQf,MACnB1B,UAAU,WAId,yBAAKA,UAAU,eACb,4BAAK2C,EAAMF,QAAQf,a,GAdWxB,cC+BzB4C,EAxBdzB,Y,mLAGG,OACE,kBAAC,EAAD,CAAMrB,UAAS,WAAMiB,EAAMC,OAASjB,GAAG,UACrC,kBAAC,IAAD,CACEiB,MAAM,QACNI,MAAO,CAAEC,WAAY,IACrBC,eAAgB,MAElB,4BAAKC,EAAKa,SAAS,GAAGZ,MAAtB,KAEA,yBAAK1B,UAAU,iBACZyB,EAAKa,SAAS,GAAGC,MAAMP,KAAI,SAAAQ,GAC1B,OAAO,kBAAC,EAAD,CAAYG,MAAOH,QAI9B,kBAAC,EAAD,CAAMxB,KAAMS,EAAKU,MAAMY,GAAGb,IAAK5B,OAAO,qB,GAjBzBJ,e,ECiBN8C,G,MArBd3B,Y,mLAGG,OACE,yBAAKrB,UAAU,UACb,kBAAC,EAAD,CAAMM,OAAO,SAASU,KAAMS,EAAKU,MAAMC,KAAKF,KAC1C,wBAAIlC,UAAU,uBAAd,WAGF,kBAAC,EAAD,CAAMM,OAAO,QAAQU,KAAMS,EAAKU,MAAMC,KAAKF,KACzC,wBAAIlC,UAAU,sBAAd,UAGF,wBAAIA,UAAU,qBAAqBiD,QAAS,kBAAMhC,EAAMiC,WAAxD,SACSjC,EAAMC,Y,GAbFhB,e,SCaNiD,MAdf,WACE,OACE,yBAAKnD,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCJcoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c659044.chunk.js","sourcesContent":["import React, { Component, Children } from \"react\";\r\nimport \"./page.css\";\r\n\r\nexport default class Page extends Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <div className={`page ${this.props.className || \"\"}`} id={this.props.id}>{children}</div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-scroll\";\r\nimport \"./move.css\";\r\n\r\nexport default class Move extends Component {\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    return (\r\n      <Link\r\n        activeClass=\"active\"\r\n        to={this.props.target}\r\n        spy={true}\r\n        smooth={true}\r\n        hashSpy={true}\r\n        offset={0}\r\n        duration={500}\r\n        delay={0}\r\n        isDynamic={true}\r\n        ignoreCancelEvents={false}\r\n      >\r\n        {children}\r\n        <div className=\"pos\">\r\n          <img src={this.props.icon} className=\"img\" />\r\n        </div>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n","import {\r\n  observable,\r\n  action\r\n} from \"C:/Users/Hamid Hesami/Desktop/resume/node_modules/mobx\";\r\n\r\nclass Store {\r\n  @observable color;\r\n  constructor() {\r\n    this.color = 1;\r\n  }\r\n  Change() {\r\n    if (this.color < 3) {\r\n      this.color += 1;\r\n    } else {\r\n      this.color = 1;\r\n    }\r\n  }\r\n}\r\n\r\nconst store = new Store();\r\n\r\nexport default store;\r\n","import React, { Component, Children } from \"react\";\r\nimport Page from \"../components/page\";\r\nimport { SocialIcon } from \"react-social-icons\";\r\nimport data from \"../data.json\";\r\nimport Move from \"../components/move\";\r\nimport Snowfall from \"C:/Users/Hamid Hesami/Desktop/resume/node_modules/react-snowfall\";\r\nimport store from \"../store/index\"\r\nimport \"./socialmedia.css\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass Socialmedia extends Component {\r\n  render() {\r\n    return (\r\n      <Page className={`a${store.color}`} id=\"socialmedia\">\r\n        <Snowfall\r\n          color=\"white\"\r\n          style={{ background: \"\" }}\r\n          snowflakeCount={100}\r\n        />\r\n        <h1 className=\"title\">{data.title}</h1>\r\n\r\n        <h2 style={{ textAlign: \"center\" }}>{data.subtitle}</h2>\r\n\r\n        <div className=\"icons\">\r\n          {Object.keys(data.links).map(key => (\r\n            <div className=\"icon\">\r\n              <SocialIcon url={data.links[key]} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <Move icon={data.icons.down.url} target=\"about\" />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Socialmedia","import React, { Component, Children } from \"react\";\r\nimport Page from \"../components/page\";\r\nimport data from \"../data.json\";\r\nimport Move from \"../components/move\";\r\nimport Snowfall from \"react-snowfall\";\r\nimport \"./About.css\";\r\nimport { observer } from \"mobx-react\";\r\nimport store from \"../store\";\r\n\r\n@observer\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <Page className={`b${store.color}`} id=\"about\">\r\n        <Snowfall\r\n          color=\"white\"\r\n          style={{ background: \"\" }}\r\n          snowflakeCount={100}\r\n        />\r\n        <h1 className=\"h3\" id=\"about\">\r\n          {\" \"}\r\n          {data.sections[0].title}\r\n        </h1>\r\n        {data.sections[0].items.map(i => (\r\n          <p>{i.content}</p>\r\n        ))}\r\n\r\n        <Move icon={data.icons.down.url} target=\"skills\" />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About","import React, { Component } from \"react\";\r\nimport \"./skill.css\"\r\n\r\nexport default class SkillCards extends Component {\r\n  render() {\r\n    const { skill } = this.props;\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"image-wrapper\">\r\n          <img\r\n            src={skill.content.img}\r\n            alt={skill.content.title}\r\n            className=\"image\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"skill-title\">\r\n          <h4>{skill.content.title}</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, Children } from \"react\";\r\nimport Page from \"../components/page\";\r\nimport data from \"../data.json\";\r\nimport SkillCards from \"../components/skill_cards\";\r\nimport Snowfall from \"react-snowfall\";\r\nimport Move from \"../components/move\";\r\nimport \"../components/skill.css\";\r\nimport { observer } from \"mobx-react\";\r\nimport store from \"../store\";\r\n\r\n@observer\r\nclass Skills extends Component {\r\n  render() {\r\n    return (\r\n      <Page className={`c${store.color}`} id=\"skills\">\r\n        <Snowfall\r\n          color=\"white\"\r\n          style={{ background: \"\" }}\r\n          snowflakeCount={100}\r\n        />\r\n        <h3>{data.sections[1].title} </h3>\r\n\r\n        <div className=\"cards_wrapper\">\r\n          {data.sections[1].items.map(i => {\r\n            return <SkillCards skill={i} />;\r\n          })}\r\n        </div>\r\n\r\n        <Move icon={data.icons.up.url} target=\"socialmedia\" />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Skills;\r\n","import React, { Component } from \"react\";\r\nimport Move from \"../components/move\";\r\nimport data from \"../data.json\";\r\nimport store from \"../store/index\";\r\nimport { observer } from \"mobx-react\";\r\nimport \"./navbar.css\";\r\n\r\n@observer\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navbar\">\r\n        <Move target=\"skills\" icon={data.icons.down.url}>\r\n          <h1 className=\"nav-item nav-skills\">Skills</h1>\r\n        </Move>\r\n\r\n        <Move target=\"about\" icon={data.icons.down.url}>\r\n          <h1 className=\"nav-item nav-about\">About</h1>\r\n        </Move>\r\n\r\n        <h1 className=\"nav-item nav-theme\" onClick={() => store.Change()}>\r\n          theme {store.color}\r\n        </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport Socialmedia from \"./sections/socialmedia\";\nimport About from \"./sections/About\";\nimport Skills from \"./sections/skills\";\nimport Navbar from \"./components/navbar\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n\n      <Socialmedia />\n\n      <About />\n\n      <Skills />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}